{"version":3,"sources":["components/CanvasDataGrid.tsx","components/WorkSheet.tsx","pages/ShowPage/ShowData/index.tsx"],"names":["CanvasDataGrid","data","schema","attributes","onCreate","props","divEl","useRef","gridRef","useEffect","current","grid","canvasDataGrid","parentNode","style","scrollBarBoxWidth","scrollBarWidth","dispose","ref","editable","allowColumnResize","allowRowResize","orderBy","WorkSheet","handleCreate","useCallback","node","window","filters","number","value","filterFor","oldStringSorter","sorters","string","columnName","direction","sortTime","sortCount","l","r","info","addEventListener","e","star","row","ctx","fillStyle","height","margin","css","TabPane","Tabs","ShowData","onGetData","tabs","useState","activeKey","setActiveKey","handleChange","key","onChange","size","centered","map","name","tab","SHOW_DATA_ALL_KEY","SCHEMA_ALL","SCHEMA"],"mappings":"sOAaaA,EAET,YAA6D,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,SAAaC,EAAS,yDACxDC,EAAQC,iBAAO,MACfC,EAAUD,iBAAO,MA2BvB,OAzBAE,qBAAU,WACJD,EAAQE,UACTF,EAAQE,QAAgBR,OAASA,KAEnC,CAACA,IACJO,qBAAU,WACJD,EAAQE,UACTF,EAAQE,QAAgBT,KAAOA,KAEjC,CAACA,IACJQ,qBAAU,WACR,IAAME,EAAOC,YAAe,aAC1BC,WAAYP,EAAMI,QAClBR,OAAQA,EACRD,KAAMA,GACHE,IAML,OAJAQ,EAAKG,MAAMC,kBAAoB,GAC/BJ,EAAKG,MAAME,eAAiB,GAC5BZ,GAAYA,EAASO,GACrBH,EAAQE,QAAUC,EACX,WACLA,EAAKM,aAEN,IACI,+BAAKC,IAAKZ,GAAWD,K,yRCtB9B,IAAMF,EAAa,CACjBgB,UAAU,EACVC,mBAAmB,EACnBC,gBAAgB,EAChBC,QAAS,gBAEEC,EAAgC,YAAuC,IAA3BtB,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAAQE,EAAY,EAAZA,SAC/DoB,EAAeC,uBAAY,SAACC,GAC/BC,OAAeD,KAAOA,EAEvBA,EAAKE,QAAQC,OAAS,SAAUC,EAAYC,GAC1C,OAAKA,GAGED,GAASC,GAElB,IAAMC,EAAkBN,EAAKO,QAAQC,OAErCR,EAAKO,QAAQC,OAAS,SAAUC,EAAoBC,GAClD,GAAmB,iBAAfD,EAAqB,CACvB,IAAME,EAAWL,EAAgBG,EAAYC,GACvCE,EAAYZ,EAAKO,QAAQJ,OAAO,qBAAOO,GAC7C,OAAO,SAACG,EAAQC,GACd,IAAMC,EAAOJ,EAASE,EAAGC,GACzB,OAAgB,IAATC,EAAaH,EAAUC,EAAGC,GAAKC,GAEnC,OAAOT,EAAgBG,EAAYC,IAG5CV,EAAKgB,iBAAiB,cAAc,SAAUC,GAC5C,IAAMC,EAAOD,EAAEE,IAAI,gBACN,IAATD,EACFD,EAAEG,IAAIC,UAAY,UACA,IAATH,IACTD,EAAEG,IAAIC,UAAY,cAGtBrB,EAAKZ,MAAMkC,OAAS,OACpBtB,EAAKZ,MAAMmC,OAAS,SACpB7C,GAAYA,EAASsB,KACpB,IACH,OACE,YAAC,EAAD,CACEwB,IAAKA,YAAF,KASH9C,SAAUoB,EACVvB,KAAMA,EACNC,OAAQA,EACRC,WAAYA,M,0hBClEVgD,EAAYC,IAAZD,QAEKE,EAA8B,YAAgC,IAApBC,EAAmB,EAAnBA,UAAWC,EAAQ,EAARA,KAAQ,EACtCC,mBAASD,EAAK,IADwB,mBACjEE,EADiE,KACtDC,EADsD,KAElEC,EAAelC,uBAAY,SAACmC,GAChCF,EAAaE,KACZ,IACH,OACE,mBACEV,IAAKA,YAAF,KADL,UASE,YAAC,IAAD,CACEO,UAAWA,EACXI,SAAUF,EACVG,KAAK,QACLC,UAAQ,EACRb,IAAKA,YAAF,KALL,UAYGK,EAAKS,KAAI,SAACC,GAAD,OACR,YAACd,EAAD,CAASe,IAAKD,GAAWA,MAE3B,YAACd,EAAD,CAASe,IAAKC,KAAwBA,QAExC,YAAC,IAAD,CACElE,KAAMqD,EAAUG,GAChBvD,OAAQuD,IAAcU,IAAoBC,IAAaC","file":"static/js/7.3f418661.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport React, { FC, useEffect, useRef } from 'react';\n// @ts-ignore\nimport canvasDataGrid from 'canvas-datagrid';\n\ntype CanvasDataGridProps = {\n  onCreate?: (grid: any) => void; // 获取最初的参数\n  attributes?: {\n    [key: string]: any;\n  };\n  data: Array<any> | undefined;\n  schema?: Array<any>;\n};\nexport const CanvasDataGrid: FC<\n  CanvasDataGridProps & React.HTMLAttributes<HTMLDivElement>\n> = function ({ data, schema, attributes, onCreate, ...props }) {\n  const divEl = useRef(null);\n  const gridRef = useRef(null);\n  // TODO: ADD go_to_top_button and bottom button\n  useEffect(() => {\n    if (gridRef.current) {\n      (gridRef.current as any).schema = schema;\n    }\n  }, [schema]);\n  useEffect(() => {\n    if (gridRef.current) {\n      (gridRef.current as any).data = data;\n    }\n  }, [data]);\n  useEffect(() => {\n    const grid = canvasDataGrid({\n      parentNode: divEl.current,\n      schema: schema,\n      data: data,\n      ...attributes,\n    });\n    grid.style.scrollBarBoxWidth = 10;\n    grid.style.scrollBarWidth = 13;\n    onCreate && onCreate(grid);\n    gridRef.current = grid;\n    return () => {\n      grid.dispose();\n    };\n  }, []);\n  return <div ref={divEl} {...props} />;\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport React, { FC, useCallback, useMemo } from 'react';\nimport { CanvasDataGrid } from './CanvasDataGrid';\n\ntype WorkSheetProps = {\n  data: Array<any>;\n  schema: SchemaType;\n  onCreate?: (grid: any) => void;\n};\n\ntype SchemaType = Array<{\n  name?: string;\n  type?: string;\n  title?: string;\n  width?: number;\n  hidden?: boolean;\n  filter?: (e: any) => boolean;\n  formatter?: (e: any) => any;\n  defaultValue?: any;\n}>;\n\nconst attributes = {\n  editable: false,\n  allowColumnResize: false,\n  allowRowResize: false,\n  orderBy: '时间',\n};\nexport const WorkSheet: FC<WorkSheetProps> = function ({ data, schema, onCreate }) {\n  const handleCreate = useCallback((node: any) => {\n    (window as any).node = node;\n    // fix filter number:\n    node.filters.number = function (value: any, filterFor: any) {\n      if (!filterFor) {\n        return true;\n      }\n      return value == filterFor;\n    };\n    const oldStringSorter = node.sorters.string;\n    // sortBy 时间\n    node.sorters.string = function (columnName: string, direction: string) {\n      if (columnName === '时间') {\n        const sortTime = oldStringSorter(columnName, direction);\n        const sortCount = node.sorters.number('总次数', direction);\n        return (l: any, r: any) => {\n          const info = sortTime(l, r);\n          return info === 0 ? sortCount(l, r) : info;\n        };\n      } else return oldStringSorter(columnName, direction);\n    };\n    // render color:\n    node.addEventListener('rendertext', function (e: any) {\n      const star = e.row['星级'];\n      if (star === 4) {\n        e.ctx.fillStyle = '#A256E1';\n      } else if (star === 5) {\n        e.ctx.fillStyle = '#BD6932';\n      }\n    });\n    node.style.height = '100%';\n    node.style.margin = '0 auto';\n    onCreate && onCreate(node);\n  }, []);\n  return (\n    <CanvasDataGrid\n      css={css`\n        width: 100%;\n        height: 100%;\n        position: relative;\n        overflow-y: hidden;\n        overflow-x: auto;\n        margin-bottom: 20px;\n        border-bottom: 2px dotted thistle;\n      `}\n      onCreate={handleCreate}\n      data={data}\n      schema={schema}\n      attributes={attributes}\n    />\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport React, { FC, useCallback, useState } from 'react';\nimport { Tabs } from 'antd';\nimport { SCHEMA, SCHEMA_ALL, SHOW_DATA_ALL_KEY } from 'const';\nimport { WorkSheet } from 'components/WorkSheet';\n\ntype ShowDataProps = {\n  onGetData: (key: string) => any;\n  tabs: Array<string>;\n};\nconst { TabPane } = Tabs;\n\nexport const ShowData: FC<ShowDataProps> = function ({ onGetData, tabs }) {\n  const [activeKey, setActiveKey] = useState(tabs[0]);\n  const handleChange = useCallback((key) => {\n    setActiveKey(key);\n  }, []);\n  return (\n    <div\n      css={css`\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      `}\n    >\n      <Tabs\n        activeKey={activeKey}\n        onChange={handleChange}\n        size='large'\n        centered\n        css={css`\n          .ant-tabs-nav {\n            background: #fff;\n            height: 64px;\n          }\n        `}\n      >\n        {tabs.map((name: string) => (\n          <TabPane tab={name} key={name} />\n        ))}\n        <TabPane tab={SHOW_DATA_ALL_KEY} key={SHOW_DATA_ALL_KEY} />\n      </Tabs>\n      <WorkSheet\n        data={onGetData(activeKey)}\n        schema={activeKey === SHOW_DATA_ALL_KEY ? SCHEMA_ALL : SCHEMA}\n      />\n    </div>\n  );\n};\n"],"sourceRoot":""}